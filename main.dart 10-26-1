// main.dart — 울산캘린더 완성형 (v2025.10)
// 전체 한 파일로 실행 가능 / Flutter 3.35.x verified

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:html/parser.dart' as html_parser;
import 'package:html/dom.dart' as dom;

// ================== 기본 설정 ==================
const String NEWS_API_KEY = '2b208ebd795b4f0fb9e380844f894932'; // ← 여기에 본인 키 입력
const String kAdminPassword = '20201971'; // 관리자 비밀번호
// ==============================================

// 테마 전역 컨트롤러
final ValueNotifier<ThemeMode> appTheme = ValueNotifier(ThemeMode.system);

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await initializeDateFormatting('ko_KR', null);

  final prefs = await SharedPreferences.getInstance();
  final themeStr = prefs.getString('theme_mode') ?? 'system';
  appTheme.value = switch (themeStr) {
    'light' => ThemeMode.light,
    'dark' => ThemeMode.dark,
    _ => ThemeMode.system,
  };

  runApp(const UlsanCalendarApp());
}

class UlsanCalendarApp extends StatelessWidget {
  const UlsanCalendarApp({super.key});
  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<ThemeMode>(
      valueListenable: appTheme,
      builder: (_, mode, __) {
        return MaterialApp(
          title: '울산캘린더',
          debugShowCheckedModeBanner: false,
          themeMode: mode,
          theme: ThemeData(useMaterial3: true, colorSchemeSeed: Colors.blue),
          darkTheme: ThemeData(
            useMaterial3: true,
            colorSchemeSeed: Colors.blue,
            brightness: Brightness.dark,
          ),
          home: const MainPage(),
        );
      },
    );
  }
}

// ================== 데이터 모델 ==================
enum EventCategory { festival, exhibition, sport }

extension EventCategoryX on EventCategory {
  String get label => switch (this) {
    EventCategory.festival => '축제',
    EventCategory.exhibition => '공연·전시',
    EventCategory.sport => '스포츠',
  };

  Color get pastel => switch (this) {
    EventCategory.festival => Colors.redAccent,
    EventCategory.exhibition => Colors.greenAccent,
    EventCategory.sport => Colors.blueAccent,
  }.shade100;

  Color get dot => switch (this) {
    EventCategory.festival => Colors.redAccent,
    EventCategory.exhibition => Colors.greenAccent,
    EventCategory.sport => Colors.blueAccent,
  }.shade200;
}

class EventItem {
  final String title;
  final DateTime start;
  final DateTime end;
  final EventCategory category;
  final String? url;

  EventItem({
    required this.title,
    required this.start,
    required this.end,
    required this.category,
    this.url,
  });

  Map<String, dynamic> toJson() => {
    'title': title,
    'start': start.toIso8601String(),
    'end': end.toIso8601String(),
    'category': category.name,
    'url': url,
  };

  factory EventItem.fromJson(Map<String, dynamic> j) => EventItem(
    title: j['title'],
    start: DateTime.parse(j['start']),
    end: DateTime.parse(j['end']),
    category:
    EventCategory.values.firstWhere((e) => e.name == j['category']),
    url: j['url'],
  );
}

class NewsHeadline {
  final String title;
  final String? url;
  final EventCategory category;

  NewsHeadline({
    required this.title,
    this.url,
    required this.category,
  });
}

class PostItem {
  final String id;
  final String content;
  final DateTime createdAt;
  final int likes;

  PostItem({
    required this.id,
    required this.content,
    required this.createdAt,
    required this.likes,
  });

  PostItem copyWith({int? likes}) => PostItem(
    id: id,
    content: content,
    createdAt: createdAt,
    likes: likes ?? this.likes,
  );

  Map<String, dynamic> toJson() => {
    'id': id,
    'content': content,
    'createdAt': createdAt.toIso8601String(),
    'likes': likes,
  };

  factory PostItem.fromJson(Map<String, dynamic> j) => PostItem(
    id: j['id'],
    content: j['content'],
    createdAt: DateTime.parse(j['createdAt']),
    likes: j['likes'] ?? 0,
  );
}

// ================== 메인 페이지 ==================
class MainPage extends StatefulWidget {
  const MainPage({super.key});
  @override
  State<MainPage> createState() => _MainPageState();
}

class _MainPageState extends State<MainPage> {
  int _idx = 0;
  bool _isAdmin = false;

  @override
  void initState() {
    super.initState();
    _restoreAdmin();
  }

  Future<void> _restoreAdmin() async {
    final prefs = await SharedPreferences.getInstance();
    _isAdmin = prefs.getBool('is_admin') ?? false;
    if (mounted) setState(() {});
  }

  void _setAdmin(bool v) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('is_admin', v);
    setState(() => _isAdmin = v);
  }

  @override
  Widget build(BuildContext context) {
    final pages = [
      CalendarPage(onOpenSettings: _openSettings),
      const HeadlineNewsPage(),
      BoardPage(isAdmin: _isAdmin),
      const PlaceholderPage(title: '지도(옵션)'),
    ];

    return Scaffold(
      body: pages[_idx],
      bottomNavigationBar: NavigationBar(
        selectedIndex: _idx,
        onDestinationSelected: (i) => setState(() => _idx = i),
        destinations: const [
          NavigationDestination(icon: Icon(Icons.calendar_month), label: '캘린더'),
          NavigationDestination(icon: Icon(Icons.article), label: '뉴스'),
          NavigationDestination(icon: Icon(Icons.forum), label: '게시판'),
          NavigationDestination(icon: Icon(Icons.map), label: '지도'),
        ],
      ),
    );
  }

  // ⚙️ 설정 다이얼로그
  Future<void> _openSettings() async {
    final prefs = await SharedPreferences.getInstance();
    final TextEditingController pw = TextEditingController();
    bool tempAdmin = _isAdmin;
    ThemeMode tempMode = appTheme.value;

    await showDialog(
      context: context,
      builder: (ctx) {
        return StatefulBuilder(builder: (ctx, setState) {
          return AlertDialog(
            title: const Text('설정'),
            content: SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text('테마 선택'),
                  const SizedBox(height: 8),
                  SegmentedButton<ThemeMode>(
                    segments: const [
                      ButtonSegment(value: ThemeMode.light, label: Text('라이트')),
                      ButtonSegment(value: ThemeMode.dark, label: Text('다크')),
                      ButtonSegment(value: ThemeMode.system, label: Text('시스템')),
                    ],
                    selected: {tempMode},
                    onSelectionChanged: (s) => setState(() => tempMode = s.first),
                  ),
                  const SizedBox(height: 20),
                  TextField(
                    controller: pw,
                    obscureText: true,
                    decoration: const InputDecoration(
                      labelText: '관리자 비밀번호',
                      border: OutlineInputBorder(),
                    ),
                  ),
                  const SizedBox(height: 8),
                  ElevatedButton(
                    onPressed: () {
                      if (pw.text == kAdminPassword) {
                        tempAdmin = true;
                        ScaffoldMessenger.of(ctx).showSnackBar(
                          const SnackBar(content: Text('관리자 로그인 성공')),
                        );
                        setState(() {});
                      } else {
                        ScaffoldMessenger.of(ctx).showSnackBar(
                          const SnackBar(content: Text('비밀번호가 틀렸습니다.')),
                        );
                      }
                    },
                    child: const Text('로그인'),
                  ),
                  if (tempAdmin)
                    Row(
                      children: [
                        const Icon(Icons.verified, color: Colors.green),
                        const SizedBox(width: 6),
                        const Text('관리자 모드 활성화'),
                        const Spacer(),
                        TextButton(
                          onPressed: () {
                            tempAdmin = false;
                            ScaffoldMessenger.of(ctx).showSnackBar(
                              const SnackBar(content: Text('로그아웃되었습니다')),
                            );
                            setState(() {});
                          },
                          child: const Text('로그아웃'),
                        ),
                      ],
                    ),
                ],
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(ctx),
                child: const Text('닫기'),
              ),
              ElevatedButton(
                onPressed: () async {
                  appTheme.value = tempMode;
                  await prefs.setString('theme_mode', switch (tempMode) {
                    ThemeMode.light => 'light',
                    ThemeMode.dark => 'dark',
                    _ => 'system',
                  });
                  _setAdmin(tempAdmin);
                  if (ctx.mounted) Navigator.pop(ctx);
                },
                child: const Text('저장'),
              ),
            ],
          );
        });
      },
    );
  }
}
// ================== 캘린더: 자동 크롤링 + 뉴스 파싱 ==================
class CalendarPage extends StatefulWidget {
  final Future<void> Function()? onOpenSettings;
  const CalendarPage({super.key, this.onOpenSettings});
  @override
  State<CalendarPage> createState() => _CalendarPageState();
}

class _CalendarPageState extends State<CalendarPage> {
  DateTime _focused = DateTime.now();
  DateTime? _selected;

  // 날짜키 -> 이벤트
  final Map<String, List<EventItem>> _events = {};
  bool _syncing = false;

  // 카테고리 탭
  EventCategory _selectedCat = EventCategory.festival;
  List<NewsHeadline> _headlines = [];

  @override
  void initState() {
    super.initState();
    _restoreEvents().then((_) async {
      _seedSportsFromScreenshot();
      await _persistEvents();
      await _syncAll(); // 전시 크롤링 + 뉴스 동기화
    });
  }

  // ---------- 저장/복구 ----------
  Future<void> _restoreEvents() async {
    final prefs = await SharedPreferences.getInstance();
    final s = prefs.getString('ulsan_events');
    if (s == null) return;
    final map = json.decode(s) as Map<String, dynamic>;
    _events.clear();
    map.forEach((k, v) {
      _events[k] =
          (v as List).map((e) => EventItem.fromJson(e as Map<String, dynamic>)).toList();
    });
    if (mounted) setState(() {});
  }

  Future<void> _persistEvents() async {
    final prefs = await SharedPreferences.getInstance();
    final save =
    _events.map((k, v) => MapEntry(k, v.map((e) => e.toJson()).toList()));
    await prefs.setString('ulsan_events', json.encode(save));
  }

  // ---------- 유틸 ----------
  DateTime _dateOnly(DateTime d) => DateTime(d.year, d.month, d.day);
  String _keyOf(DateTime d) {
    final x = _dateOnly(d);
    return '${x.year}-${x.month}-${x.day}';
  }

  List<EventItem> _getEvents(DateTime d) => _events[_keyOf(d)] ?? [];

  void _addEventRange(EventItem e) {
    final start = _dateOnly(e.start);
    final end = _dateOnly(e.end);
    for (DateTime d = start; !d.isAfter(end); d = d.add(const Duration(days: 1))) {
      final k = _keyOf(d);
      _events.putIfAbsent(k, () => []);
      // 중복 방지(제목/카테고리/링크 동일시 스킵)
      if (!_events[k]!
          .any((x) => x.title == e.title && x.category == e.category && x.url == e.url)) {
        _events[k]!.add(e);
      }
    }
  }

  String _shortTitle(String t) {
    final s = t.replaceAll(RegExp(r'\s+'), ' ').trim();
    return s.length > 18 ? '${s.substring(0, 18)}…' : s;
  }

  // ---------- 시드 스포츠 ----------
  void _seedSportsFromScreenshot() {
    final y = DateTime.now().year;
    final seeds = <EventItem>[
      EventItem(
        title: _shortTitle('롯데 vs NC (문수야구경기장, 18:30)'),
        start: DateTime(y, 9, 23),
        end: DateTime(y, 9, 23),
        category: EventCategory.sport,
        url: null,
      ),
      EventItem(
        title: _shortTitle('롯데 vs LG (문수야구경기장, 18:30)'),
        start: DateTime(y, 9, 25),
        end: DateTime(y, 9, 25),
        category: EventCategory.sport,
        url: null,
      ),
    ];
    for (final e in seeds) {
      _addEventRange(e);
    }
    setState(() {}); // 즉시 반영
  }

  // ---------- 동기화(전시 크롤링 + 뉴스 파싱) ----------
  Future<void> _syncAll() async {
    setState(() => _syncing = true);
    try {
      // (1) 울산시 전시/공연 크롤링
      final exhibitions = await _crawlUlsanCulture();
      for (final e in exhibitions) {
        _addEventRange(e);
      }

      // (2) 뉴스 헤드라인 수집(카테고리별) + 날짜 파싱 → 이벤트화
      final festHeads = await _fetchNewsHeads(
        '울산 축제 OR 국가정원 축제 OR 울산 페스티벌 OR 울산 행사',
        EventCategory.festival,
      );
      final exHeads = await _fetchNewsHeads(
        '울산 공연 OR 울산 전시 OR 울산 문화예술',
        EventCategory.exhibition,
      );
      final sportHeads = await _fetchNewsHeads(
        '문수경기장 OR 문수축구경기장 OR 울산 현대 홈경기 OR 울산HD 경기 일정',
        EventCategory.sport,
      );

      // 현재 선택 카테고리의 헤드라인만 표시
      _headlines = switch (_selectedCat) {
        EventCategory.festival => festHeads,
        EventCategory.exhibition => exHeads,
        EventCategory.sport => sportHeads,
      };

      // 뉴스 → 일정 반영
      _eventsFromNews(festHeads);
      _eventsFromNews(exHeads);
      _eventsFromNews(sportHeads);

      await _persistEvents();
    } catch (_) {
      // 네트워크 오류/구조 변경 등은 조용히 무시
    } finally {
      if (mounted) setState(() => _syncing = false);
    }
  }

  // 울산시 문화(전시/공연) 페이지 크롤링(견고한 패턴)
  Future<List<EventItem>> _crawlUlsanCulture() async {
    final url = Uri.parse('https://www.ulsan.go.kr/s/uam/main.ulsan');
    final res = await http.get(url, headers: {
      'User-Agent':
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0 Safari/537.36'
    });
    if (res.statusCode != 200) return [];

    final doc = html_parser.parse(utf8.decode(res.bodyBytes));

    // 다양한 요소를 모아서 텍스트 내 "전시/공연/문화/행사"가 포함된 블록만 필터
    final cands = <dom.Element>[];
    cands.addAll(doc.querySelectorAll('a'));
    cands.addAll(doc.querySelectorAll('li'));
    cands.addAll(doc.querySelectorAll('div'));

    final resList = <EventItem>[];

    // 날짜/기간 패턴
    final regRange = RegExp(
        r'(\d{4})?\s*\.?\s*(\d{1,2})\s*\.\s*(\d{1,2})\s*(?:\([월화수목금토일]\))?\s*[~\-]\s*(?:(\d{4})?\s*\.?\s*)?(\d{1,2})\s*\.\s*(\d{1,2})');
    final regSingle = RegExp(
        r'(?:(\d{4})\s*\.?)?\s*(\d{1,2})\s*\.\s*(\d{1,2})\s*(?:\([월화수목금토일]\))?');

    for (final el in cands) {
      final text = el.text.replaceAll('\n', ' ').replaceAll(RegExp(r'\s+'), ' ').trim();
      if (!(text.contains('전시') ||
          text.contains('공연') ||
          text.contains('문화') ||
          text.contains('행사'))) continue;

      DateTime? s, e;

      final mR = regRange.firstMatch(text);
      if (mR != null) {
        final y1 = (mR.group(1)?.isNotEmpty ?? false)
            ? int.parse(mR.group(1)!)
            : DateTime.now().year;
        final m1 = int.parse(mR.group(2)!);
        final d1 = int.parse(mR.group(3)!);
        final y2 = (mR.group(4)?.isNotEmpty ?? false) ? int.parse(mR.group(4)!) : y1;
        final m2 = int.parse(mR.group(5)!);
        final d2 = int.parse(mR.group(6)!);
        s = DateTime(y1, m1, d1);
        e = DateTime(y2, m2, d2);
      } else {
        final mS = regSingle.firstMatch(text);
        if (mS != null) {
          final y =
          (mS.group(1)?.isNotEmpty ?? false) ? int.parse(mS.group(1)!) : DateTime.now().year;
          final mm = int.parse(mS.group(2)!);
          final dd = int.parse(mS.group(3)!);
          s = DateTime(y, mm, dd);
          e = s;
        }
      }

      if (s == null || e == null) continue;

      // 제목 후보 추출
      String title = _titlePref(text);
      if (title.isEmpty) title = text;

      // 링크 추출
      String? link;
      final linkTag = el.querySelector('a');
      if (linkTag != null) {
        final href = linkTag.attributes['href'];
        if (href != null && href.isNotEmpty) {
          link = href.startsWith('http') ? href : 'https://www.ulsan.go.kr$href';
        }
      }

      resList.add(EventItem(
        title: _shortTitle(title),
        start: s,
        end: e,
        category: EventCategory.exhibition,
        url: link,
      ));
    }
    return resList;
  }

  String _titlePref(String raw) {
    final r = RegExp(r'「([^」]+)」|『([^』]+)』|“([^”]+)”|\"([^\"]+)\"|\[([^\]]+)\]');
    final m = r.firstMatch(raw);
    if (m != null) {
      for (int i = 1; i <= 5; i++) {
        final g = m.group(i);
        if (g != null && g.trim().isNotEmpty) return g.trim();
      }
    }
    if (raw.contains(':')) return raw.split(':').first.trim();
    return raw.trim();
  }

  Future<List<NewsHeadline>> _fetchNewsHeads(
      String query, EventCategory cat) async {
    if (NEWS_API_KEY.isEmpty || NEWS_API_KEY == 'YOUR_NEWSAPI_KEY') return [];
    final url = Uri.parse(
        'https://newsapi.org/v2/everything?q=$query&language=ko&sortBy=publishedAt&pageSize=40&apiKey=$NEWS_API_KEY');
    final res = await http.get(url);
    if (res.statusCode != 200) return [];
    final data = json.decode(res.body);
    final List arr = data['articles'] ?? [];
    return arr
        .map((a) => NewsHeadline(
      title: (a['title'] ?? '').toString(),
      url: ((a['url'] ?? '') as String).isEmpty ? null : a['url'],
      category: cat,
    ))
        .where((h) => h.title.isNotEmpty)
        .toList();
  }

  // 헤드라인에서 날짜/기간 파싱 → 이벤트로 변환
  void _eventsFromNews(List<NewsHeadline> list) {
    final year = DateTime.now().year;

    final patRangeSameMonth =
    RegExp(r'(\d{1,2})\s*월\s*(\d{1,2})\s*~\s*(\d{1,2})\s*일'); // 9월 24~26일
    final patRangeCross = RegExp(
        r'(\d{1,2})\s*월\s*(\d{1,2})\s*일\s*[~\-]\s*(\d{1,2})\s*월\s*(\d{1,2})\s*일');
    final patSingle = RegExp(r'(\d{1,2})\s*월\s*(\d{1,2})\s*일');

    for (final h in list) {
      final t = h.title;
      DateTime? s, e;

      final mCross = patRangeCross.firstMatch(t);
      if (mCross != null) {
        final m1 = int.parse(mCross.group(1)!);
        final d1 = int.parse(mCross.group(2)!);
        final m2 = int.parse(mCross.group(3)!);
        final d2 = int.parse(mCross.group(4)!);
        s = DateTime(year, m1, d1);
        e = DateTime(year, m2, d2);
      } else {
        final mSame = patRangeSameMonth.firstMatch(t);
        if (mSame != null) {
          final m = int.parse(mSame.group(1)!);
          final d1 = int.parse(mSame.group(2)!);
          final d2 = int.parse(mSame.group(3)!);
          s = DateTime(year, m, d1);
          e = DateTime(year, m, d2);
        } else {
          final mOne = patSingle.firstMatch(t);
          if (mOne != null) {
            final m = int.parse(mOne.group(1)!);
            final d = int.parse(mOne.group(2)!);
            s = DateTime(year, m, d);
            e = s;
          }
        }
      }

      if (s != null && e != null) {
        _addEventRange(EventItem(
          title: _shortTitle(_titlePref(t)),
          start: s,
          end: e,
          category: h.category,
          url: h.url,
        ));
      }
    }
  }

  // ---------- UI ----------
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('울산캘린더'),
        actions: [
          IconButton(
            tooltip: '동기화(전시/뉴스)',
            onPressed: _syncing ? null : _syncAll,
            icon: _syncing
                ? const SizedBox(
                width: 20, height: 20, child: CircularProgressIndicator())
                : const Icon(Icons.sync),
          ),
          IconButton(
            tooltip: '설정',
            onPressed: widget.onOpenSettings,
            icon: const Icon(Icons.settings),
          ),
        ],
      ),
      body: Column(
        children: [
          TableCalendar<EventItem>(
            locale: 'ko_KR',
            firstDay: DateTime.utc(2020, 1, 1),
            lastDay: DateTime.utc(2032, 12, 31),
            focusedDay: _focused,
            selectedDayPredicate: (d) => isSameDay(_selected, d),
            onDaySelected: (sel, foc) {
              setState(() {
                _selected = sel;
                _focused = foc;
              });
              showModalBottomSheet(
                context: context,
                builder: (_) => _eventSheet(sel),
              );
            },
            eventLoader: _getEvents,
            calendarBuilders: CalendarBuilders<EventItem>(
              markerBuilder: (context, date, events) {
                if (events.isEmpty) return const SizedBox();
                final dots = events.take(3).map((e) {
                  return Container(
                    margin: const EdgeInsets.symmetric(horizontal: 1.5),
                    width: 6,
                    height: 6,
                    decoration: BoxDecoration(
                      color: e.category.dot,
                      shape: BoxShape.circle,
                    ),
                  );
                }).toList();
                return Positioned(bottom: 2, child: Row(children: dots));
              },
            ),
            calendarStyle: const CalendarStyle(
              todayDecoration: BoxDecoration(color: Colors.blue, shape: BoxShape.circle),
              selectedDecoration: BoxDecoration(color: Colors.orange, shape: BoxShape.circle),
            ),
          ),
          const SizedBox(height: 10),
          // 카테고리 버튼
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12),
            child: Row(
              children: [
                _catButton(EventCategory.festival),
                _catButton(EventCategory.exhibition),
                _catButton(EventCategory.sport),
              ],
            ),
          ),
          const SizedBox(height: 8),
          // 헤드라인(클릭 → 링크)
          Expanded(
            child: _headlines.isEmpty
                ? const Center(child: Text('헤드라인이 아직 없어요. 상단 ↻ 동기화 눌러봐!'))
                : ListView.builder(
              itemCount: _headlines.length,
              itemBuilder: (c, i) {
                final h = _headlines[i];
                return ListTile(
                  dense: true,
                  title: Text(h.title),
                  trailing: const Icon(Icons.open_in_new),
                  onTap: () async {
                    if (h.url == null) return;
                    final uri = Uri.parse(h.url!);
                    if (await canLaunchUrl(uri)) {
                      await launchUrl(uri, mode: LaunchMode.externalApplication);
                    }
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _catButton(EventCategory cat) {
    final sel = _selectedCat == cat;
    return Expanded(
      child: GestureDetector(
        onTap: () async {
          setState(() {
            _selectedCat = cat;
            _headlines = [];
          });
          List<NewsHeadline> heads = [];
          if (cat == EventCategory.festival) {
            heads = await _fetchNewsHeads(
                '울산 축제 OR 국가정원 축제 OR 울산 페스티벌 OR 울산 행사', cat);
          } else if (cat == EventCategory.exhibition) {
            heads = await _fetchNewsHeads('울산 공연 OR 울산 전시 OR 울산 문화예술', cat);
          } else {
            heads = await _fetchNewsHeads(
                '문수경기장 OR 문수축구경기장 OR 울산 현대 홈경기 OR 울산HD 경기 일정', cat);
          }
          if (mounted) setState(() => _headlines = heads);
        },
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 180),
          margin: const EdgeInsets.symmetric(horizontal: 4),
          padding: const EdgeInsets.symmetric(vertical: 10),
          decoration: BoxDecoration(
            color: sel ? cat.pastel : cat.pastel.withOpacity(0.4),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: sel ? Colors.black45 : Colors.transparent),
          ),
          child: Center(
            child: Text(cat.label, style: const TextStyle(fontWeight: FontWeight.bold)),
          ),
        ),
      ),
    );
  }

  Widget _eventSheet(DateTime day) {
    final list = _getEvents(day);
    return SizedBox(
      height: 360,
      child: Column(
        children: [
          ListTile(
            title: Text("${day.year}.${day.month}.${day.day} 일정 (${list.length}개)"),
          ),
          const Divider(height: 1),
          Expanded(
            child: list.isEmpty
                ? const Center(child: Text('등록된 일정이 없습니다.'))
                : ListView.separated(
              itemCount: list.length,
              separatorBuilder: (_, __) => const Divider(height: 1),
              itemBuilder: (c, i) {
                final e = list[i];
                final range = e.start.isAtSameMomentAs(e.end)
                    ? "${e.start.month}/${e.start.day}"
                    : "${e.start.month}/${e.start.day}~${e.end.month}/${e.end.day}";
                return ListTile(
                  leading: Icon(Icons.event, color: e.category.dot),
                  title: Text(e.title),
                  subtitle: Text('${e.category.label} · $range'),
                  trailing: e.url != null ? const Icon(Icons.open_in_new) : null,
                  onTap: () async {
                    if (e.url == null) return;
                    final uri = Uri.parse(e.url!);
                    if (await canLaunchUrl(uri)) {
                      await launchUrl(uri, mode: LaunchMode.externalApplication);
                    }
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

// ================== 뉴스 탭 ==================
class HeadlineNewsPage extends StatefulWidget {
  const HeadlineNewsPage({super.key});
  @override
  State<HeadlineNewsPage> createState() => _HeadlineNewsPageState();
}

class _HeadlineNewsPageState extends State<HeadlineNewsPage> {
  List<NewsHeadline> _items = [];
  bool _loading = true;

  @override
  void initState() {
    super.initState();
    _load();
  }

  Future<void> _load() async {
    if (NEWS_API_KEY.isEmpty || NEWS_API_KEY == 'YOUR_NEWSAPI_KEY') {
      setState(() {
        _items = [];
        _loading = false;
      });
      return;
    }
    final url = Uri.parse(
        'https://newsapi.org/v2/everything?q=울산&language=ko&sortBy=publishedAt&pageSize=40&apiKey=$NEWS_API_KEY');
    final res = await http.get(url);
    if (!mounted) return;
    if (res.statusCode == 200) {
      final data = json.decode(res.body);
      final List arr = data['articles'] ?? [];
      setState(() {
        _items = arr
            .map((a) => NewsHeadline(
          title: (a['title'] ?? '').toString(),
          url: ((a['url'] ?? '') as String).isEmpty ? null : a['url'],
          category: EventCategory.festival, // 의미 없음(탭용)
        ))
            .where((h) => h.title.isNotEmpty)
            .toList();
        _loading = false;
      });
    } else {
      setState(() => _loading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('📰 울산 뉴스(헤드라인)')),
      body: _loading
          ? const Center(child: CircularProgressIndicator())
          : _items.isEmpty
          ? const Center(child: Text('API 키가 없거나 뉴스가 없습니다.'))
          : ListView.separated(
        itemCount: _items.length,
        separatorBuilder: (_, __) => const Divider(height: 1),
        itemBuilder: (c, i) {
          final h = _items[i];
          return ListTile(
            title: Text(h.title),
            trailing: const Icon(Icons.open_in_new),
            onTap: () async {
              if (h.url == null) return;
              final uri = Uri.parse(h.url!);
              if (await canLaunchUrl(uri)) {
                await launchUrl(uri, mode: LaunchMode.externalApplication);
              }
            },
          );
        },
      ),
    );
  }
}

// ================== 자유게시판 (❤️ + 날짜 + 관리자 삭제) ==================
class BoardPage extends StatefulWidget {
  final bool isAdmin;
  const BoardPage({super.key, required this.isAdmin});
  @override
  State<BoardPage> createState() => _BoardPageState();
}

class _BoardPageState extends State<BoardPage> {
  final controller = TextEditingController();
  List<PostItem> posts = [];
  Set<String> likedIds = {}; // 내 기기에서 공감 누른 글 id 모음

  @override
  void initState() {
    super.initState();
    _load();
  }

  Future<void> _load() async {
    final prefs = await SharedPreferences.getInstance();
    final raw = prefs.getString('posts_json');
    final liked = prefs.getStringList('liked_ids') ?? [];
    if (raw != null) {
      final List arr = json.decode(raw);
      posts = arr.map((e) => PostItem.fromJson(e)).toList();
    }
    likedIds = liked.toSet();
    if (mounted) setState(() {});
  }

  Future<void> _save() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('posts_json', json.encode(posts.map((e) => e.toJson()).toList()));
    await prefs.setStringList('liked_ids', likedIds.toList());
  }

  void _add() async {
    final t = controller.text.trim();
    if (t.isEmpty) return;
    final item = PostItem(
      id: DateTime.now().microsecondsSinceEpoch.toString(),
      content: t,
      createdAt: DateTime.now(),
      likes: 0,
    );
    setState(() => posts.insert(0, item));
    controller.clear();
    await _save();
  }

  void _toggleLike(PostItem p) async {
    final idx = posts.indexWhere((e) => e.id == p.id);
    if (idx < 0) return;
    final isLiked = likedIds.contains(p.id);
    final newLikes = (p.likes) + (isLiked ? -1 : 1);
    setState(() {
      posts[idx] = p.copyWith(likes: newLikes.clamp(0, 1 << 31));
      if (isLiked) {
        likedIds.remove(p.id);
      } else {
        likedIds.add(p.id);
      }
    });
    await _save();
  }

  void _delete(PostItem p) async {
    setState(() => posts.removeWhere((e) => e.id == p.id));
    likedIds.remove(p.id);
    await _save();
  }

  String _fmtDate(DateTime d) => DateFormat('yyyy.MM.dd HH:mm', 'ko_KR').format(d);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('💬 자유게시판')),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: controller,
                    decoration: const InputDecoration(
                      hintText: '글을 입력하세요',
                      border: OutlineInputBorder(),
                    ),
                    minLines: 1,
                    maxLines: 4,
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton(onPressed: _add, child: const Text('등록')),
              ],
            ),
          ),
          Expanded(
            child: posts.isEmpty
                ? const Center(child: Text('첫 글을 남겨보세요!'))
                : ListView.separated(
              itemCount: posts.length,
              separatorBuilder: (_, __) => const Divider(height: 1),
              itemBuilder: (c, i) {
                final p = posts[i];
                final isLiked = likedIds.contains(p.id);
                return ListTile(
                  title: Text(p.content),
                  subtitle: Text(_fmtDate(p.createdAt)),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // ❤️ 공감
                      InkWell(
                        onTap: () => _toggleLike(p),
                        child: Row(
                          children: [
                            Icon(
                              isLiked ? Icons.favorite : Icons.favorite_border,
                              color: Colors.redAccent,
                            ),
                            const SizedBox(width: 4),
                            Text('${p.likes}'),
                          ],
                        ),
                      ),
                      const SizedBox(width: 12),
                      // 삭제(관리자만)
                      if (widget.isAdmin)
                        IconButton(
                          tooltip: '삭제(관리자)',
                          icon: const Icon(Icons.delete_forever),
                          onPressed: () => _delete(p),
                        ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

// ================== 지도 자리(옵션) ==================
class PlaceholderPage extends StatelessWidget {
  final String title;
  const PlaceholderPage({super.key, required this.title});
  @override
  Widget build(BuildContext context) {
    return Scaffold(appBar: AppBar(title: Text(title)), body: const SizedBox());
  }
}
